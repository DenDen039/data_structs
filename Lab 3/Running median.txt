void ShiftUp(vector<int> & heap,int index){
    if(index <= 0 || (index-1)/2 < 0)
        return;
    int parent = (index-1)/2;
    if(heap[parent] < heap[index]){
        swap(heap[parent],heap[index]);
        ShiftUp(heap,parent);
    }
}
void heapify(vector<int> &arr, int i)
{
    int largest = i;
    int l = 2 * i + 1;
    int r = 2 * i + 2;
    if (l < arr.size() && arr[l] > arr[largest])
        largest = l;
    if (r < arr.size() && arr[r] > arr[largest])
        largest = r;
    if (largest != i) {
        swap(arr[i], arr[largest]);
        heapify(arr, largest);
    }
}
vector<double> runningMedian(vector<int> a) {
    int heapmin_size, heapmax_size ;
    vector<double> medians;
    vector<int> left_side,right_side;
    
    if(a.empty())
        return medians;
    medians.push_back(a[0]);
    
    if(a.size() == 1)
        return medians;
    medians.push_back((a[0]+a[1])/2.0);
    
    if(a[1] > a[0]){
        left_side.push_back(a[0]);
        right_side.push_back(-a[1]);
    }
    else{
        left_side.push_back(a[1]);
        right_side.push_back(-a[0]);   
    }
    
    for(int i = 2; i < a.size();i++){
        if(medians.back() > double(a[i])){
            left_side.push_back(a[i]);
            ShiftUp(left_side,left_side.size()-1);
        }
        else {
            right_side.push_back(-a[i]);
            ShiftUp(right_side,right_side.size()-1);
        }
        if(int(right_side.size()) - int(left_side.size())>= 2){
            swap(right_side[0],right_side[right_side.size()-1]);
            
            left_side.push_back(-right_side.back());
            right_side.pop_back();
            
            ShiftUp(left_side, left_side.size()-1);
            heapify(right_side,0);
            
        }else if((int(left_side.size()) - int(right_side.size()))>= 2){
            swap(left_side[0],left_side[left_side.size()-1]);
            
            right_side.push_back(-left_side.back());
            left_side.pop_back();
            
            ShiftUp(right_side, right_side.size()-1);
            heapify(left_side,0);
        }
        if((right_side.size()+left_side.size())%2 == 0)
            medians.push_back((left_side.front()-right_side.front())/2.0);
        else {
            if(right_side.size() > left_side.size())
                medians.push_back(-right_side.front());
            else 
                medians.push_back(left_side.front());
        }
    }
    return medians;
}